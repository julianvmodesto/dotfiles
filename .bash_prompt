#!/bin/bash
# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.
# vim: set filetype=sh :

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

prompt_git() {
	local s='';
	local git_rev='';
    local git_branch='';
    local git_output='';

    if ! command -v git >/dev/null 2>&1; then
      return;
    fi

	# Check if the current directory is in a Git repository.
	if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			if [[ -O "$(git rev-parse --show-toplevel)/.git/index" ]]; then
				git update-index --really-refresh -q &> /dev/null;
			fi;

			# Check for uncommitted changes in the index.
			if ! git diff --quiet --ignore-submodules --cached; then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! git diff-files --quiet --ignore-submodules --; then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if git rev-parse --verify refs/stash &>/dev/null; then
				s+='$';
			fi;

		fi;

        # Get the short SHA for the latest commit and the short symbolic ref.
        git_rev=$(git rev-parse --short HEAD 2>/dev/null || echo -n 'n/a')
        git_output=
        if [ "$git_rev" = 'n/a' ]; then
            git_branch='n/a'
        else
            git_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo -n 'n/a')
            git_output="git($git_rev) branch($git_branch)"
        fi

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${git_output}${blue}${s}";
	else
		return;
	fi;
}

KUBECONFIG="${HOME}/.kube/config"
prompt_kube() {
  local kube_context='';
  local kube_context_namespace='';
  if ! command -v kubectl > /dev/null; then
    return
  fi
  if [[ -e "${KUBECONFIG}" ]]; then
    kube_context=$(grep '^current-context: ' "${KUBECONFIG}" | cut -d' ' -f2-)

    kube_context_namespace="$(kubectl config view --minify --output 'jsonpath={..namespace}')"
    # Set namespace to default if it is not defined
    kube_context_namespace="${kube_context_namespace:-default}"

    local num_colors="6"
    local random_color_number
    if ! command -v bc > /dev/null; then
      random_color_number="0"
    else
      random_color_number=$(echo ${kube_context} | sha1sum | cut -f1 -d" " | awk '{print toupper($0)}' | xargs -I{} echo "ibase=16; obase=10; scale=0; {} % ${num_colors}" | bc)
    fi

    case ${random_color_number} in
    0)
      random_color=${orange}
      ;;
    1)
      random_color=${yellow}
      ;;
    2)
      random_color=${red}
      ;;
    3)
      random_color=${magenta}
      ;;
    4)
      random_color=${cyan}
      ;;
    *)
      random_color=${purple}
      ;;
    esac

    echo -e "${1}${random_color}kube(${kube_context}:${kube_context_namespace})";
  else
    return;
  fi;
}

cloud=""
if grep -q "^flags.* hypervisor" /proc/cpuinfo >/dev/null 2>&1; then
	cloud="☁️ "
fi

if tput setaf 1 &> /dev/null; then
	tput sgr0; # reset colors
	bold=$(tput bold);
	reset=$(tput sgr0);
	# Solarized colors, taken from http://git.io/solarized-colors.
	black=$(tput setaf 0);
	blue=$(tput setaf 33);
	cyan=$(tput setaf 37);
	green=$(tput setaf 64);
	magenta=$(tput setaf 5);
	orange=$(tput setaf 166);
	purple=$(tput setaf 125);
	red=$(tput setaf 124);
	violet=$(tput setaf 61);
	white=$(tput setaf 15);
	yellow=$(tput setaf 136);
else
	bold='';
	reset="\e[0m";
	# shellcheck disable=SC2034
	black="\e[1;30m";
	blue="\e[1;34m";
	cyan="\e[1;36m";
	green="\e[1;32m";
	magenta="\e[1;43m";
	# shellcheck disable=SC2034
	orange="\e[1;33m";
	# shellcheck disable=SC2034
	purple="\e[1;35m";
	red="\e[1;31m";
	violet="\e[1;35m";
	white="\e[1;37m";
	yellow="\e[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${blue}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${cyan}";
else
	hostStyle="${cyan}";
fi;

# Set the terminal title to the current working directory.
PS1="\[\033]0;\w\007\]";
PS1+="\[${bold}\]\n"; # newline
PS1+="\[${userStyle}\]\u"; # username
PS1+="\[${white}\] at ";
PS1+="\[${hostStyle}\]${cloud}\h"; # host
PS1+="\[${white}\] in ";
PS1+="\[${green}\]\w"; # working directory
PS1+="\$(prompt_git \"${white} on ${violet}\")"; # Git repository details
PS1+="\$(prompt_kube \"${white} with \")"; # Kuberenetes context details
PS1+="\n";
PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;

